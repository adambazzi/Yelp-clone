{"ast":null,"code":"const LOAD_REVIEWS = 'reviews/LOAD_REVIEWS';\nconst ADD_REVIEW = 'reviews/ADD_REVIEW';\nconst REMOVE_REVIEWS = 'reviews/REMOVE_REVIEWS';\nconst GET_SINGLE_REVIEW = 'reviews/GET_SINGLE_REVIEW';\nconst DELETE_SINGLE_REVIEW = 'reviews/DELETE_SINGLE_REVIEW';\n// action creators\nconst loadReviews = payload => ({\n  type: LOAD_REVIEWS,\n  payload\n});\nconst addReview = payload => ({\n  type: ADD_REVIEW,\n  payload\n});\nconst removeReviews = () => ({\n  type: REMOVE_REVIEWS\n});\nconst getSingleReview = payload => ({\n  type: GET_SINGLE_REVIEW,\n  payload\n});\nconst deletereviewaction = payload => ({\n  type: DELETE_SINGLE_REVIEW,\n  payload\n});\n\n// thunk functions\nexport const getReviews = () => async dispatch => {\n  const response = await fetch('/api/reviews');\n  if (response.ok) {\n    const payload = await response.json();\n    dispatch(loadReviews(payload));\n  }\n};\nexport const postReview = (id, post) => async dispatch => {\n  const response = await fetch(`/api/businesses/${id}/reviews`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(post)\n  });\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(addReview(data));\n    return data;\n  }\n};\nexport const clearReviews = () => async dispatch => {\n  dispatch(removeReviews());\n};\nexport const readASingleReview = id => async dispatch => {\n  const response = await fetch(`/api/reviews/${id}`);\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(getSingleReview(data));\n    return data;\n  }\n};\nexport const editReview = (id, review) => async dispatch => {\n  const response = await fetch(`/api/reviews/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(review)\n  });\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(addReview(data));\n    return data;\n  }\n};\nexport const deletereviewthunk = id => async dispatch => {\n  const response = await fetch(`/api/reviews/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (response.ok) {\n    const data = response.json();\n    dispatch(deletereviewaction(id));\n    return data;\n  }\n};\nconst initialState = {};\nconst reviewReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {\n    ...state\n  };\n  switch (action.type) {\n    case DELETE_SINGLE_REVIEW:\n      delete newState[action.payload];\n      return newState;\n    case GET_SINGLE_REVIEW:\n      const review = action.payload;\n      return review;\n    case LOAD_REVIEWS:\n      const reviews = action.payload;\n      return reviews;\n    case ADD_REVIEW:\n      newState[action.payload.id] = action.payload;\n      return newState;\n    case REMOVE_REVIEWS:\n      return {};\n    default:\n      return state;\n  }\n};\nexport default reviewReducer;","map":{"version":3,"names":["LOAD_REVIEWS","ADD_REVIEW","REMOVE_REVIEWS","GET_SINGLE_REVIEW","DELETE_SINGLE_REVIEW","loadReviews","payload","type","addReview","removeReviews","getSingleReview","deletereviewaction","getReviews","dispatch","response","fetch","ok","json","postReview","id","post","method","headers","body","JSON","stringify","data","clearReviews","readASingleReview","editReview","review","deletereviewthunk","initialState","reviewReducer","state","action","newState","reviews"],"sources":["/Users/adambazzi/Desktop/Yelp-clone/react-app/src/store/review.js"],"sourcesContent":["\nconst LOAD_REVIEWS = 'reviews/LOAD_REVIEWS'\nconst ADD_REVIEW = 'reviews/ADD_REVIEW'\nconst REMOVE_REVIEWS = 'reviews/REMOVE_REVIEWS'\nconst GET_SINGLE_REVIEW = 'reviews/GET_SINGLE_REVIEW'\nconst DELETE_SINGLE_REVIEW = 'reviews/DELETE_SINGLE_REVIEW'\n// action creators\nconst loadReviews = payload => ({\n    type: LOAD_REVIEWS,\n    payload\n});\n\n\nconst addReview = payload => ({\n    type: ADD_REVIEW,\n    payload\n});\n\nconst removeReviews = () => ({\n    type: REMOVE_REVIEWS\n  })\n\n  const getSingleReview = payload => ({\n    type: GET_SINGLE_REVIEW,\n    payload\n  })\nconst deletereviewaction = (payload) => ({\n        type:DELETE_SINGLE_REVIEW,\n        payload\n    })\n\n\n// thunk functions\nexport const getReviews = () => async dispatch => {\n    const response = await fetch('/api/reviews');\n    if (response.ok) {\n        const payload = await response.json();\n\n        dispatch(loadReviews(payload))\n    }\n}\n\nexport const postReview = (id, post) => async dispatch => {\n    const response = await fetch(`/api/businesses/${id}/reviews`, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(post)\n    })\n\n    if (response.ok) {\n        const data = await response.json()\n\n        dispatch(addReview(data))\n        return data;\n    }\n};\n\nexport const clearReviews = () => async dispatch => {\n    dispatch(removeReviews())\n}\n\nexport const readASingleReview = (id) => async dispatch => {\n    const response = await fetch(`/api/reviews/${id}`)\n\n    if (response.ok) {\n        const data = await response.json();\n\n        dispatch(getSingleReview(data));\n        return data;\n    }\n}\n\nexport const editReview = (id, review) => async dispatch =>{\n    const response = await fetch (`/api/reviews/${id}`,{\n        method:\"PUT\",\n        headers:{\"Content-Type\":\"application/json\"},\n        body: JSON.stringify(review)\n    })\n    if (response.ok){\n        const data = await response.json()\n        dispatch(addReview(data))\n        return data\n    }\n}\n\nexport const deletereviewthunk = (id) => async dispatch =>{\n    const response = await fetch(`/api/reviews/${id}`,{\n        method:\"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n    })\n    if (response.ok){\n        const data = response.json()\n        dispatch(deletereviewaction(id))\n        return data\n    }\n}\n\nconst initialState = {}\n\n\nconst reviewReducer = (state = initialState, action) => {\n    let newState = {...state}\n    switch (action.type) {\n        case DELETE_SINGLE_REVIEW:\n            delete newState[action.payload]\n            return newState\n        case GET_SINGLE_REVIEW:\n            const review= action.payload\n            return review\n        case LOAD_REVIEWS:\n            const reviews = action.payload\n            return reviews\n        case ADD_REVIEW:\n            newState[action.payload.id] = action.payload;\n            return newState;\n        case REMOVE_REVIEWS:\n            return {}\n        default:\n            return state;\n    }\n}\n\nexport default reviewReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}