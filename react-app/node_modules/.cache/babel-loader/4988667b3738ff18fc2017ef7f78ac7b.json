{"ast":null,"code":"const LOAD_BUSINESSES = 'businesses/LOAD_BUSINESSES';\nconst ADD_BUSINESS = 'businesses/ADD_BUSINESS';\nconst LOAD_CURRENT_USER_BUSINESSES = 'businesses/LOAD_CURRENT_USER_BUSINESSES';\nconst Load_Single_Businness_Details = 'businesses/Load_Single_Businness_Details';\nconst LOAD_FILTERED = 'businesses/LOAD_FILTERED';\nconst REMOVE_BUSINESS = 'businesses/REMOVE_BUSINESS';\n\n// Deletening one business from alll businesses\nconst DELETE_BUSINESS_FROM_ALL = 'businesses/DELETE_BUSINESS_FROM_ALL';\n\n// action creators\nconst loadBusinesses = payload => ({\n  type: LOAD_BUSINESSES,\n  payload\n});\nconst addBusiness = payload => ({\n  type: ADD_BUSINESS,\n  payload\n});\nconst loadUserBusinesses = payload => ({\n  type: LOAD_CURRENT_USER_BUSINESSES,\n  payload\n});\nexport const loadSingleBusiness = payload => ({\n  type: Load_Single_Businness_Details,\n  payload\n});\nconst deleteonebusiness = idpayload => {\n  return {\n    type: DELETE_BUSINESS_FROM_ALL,\n    idpayload\n  };\n};\nexport const loadFiltered = payload => ({\n  type: LOAD_FILTERED,\n  payload\n});\nconst removeBusiness = () => ({\n  type: REMOVE_BUSINESS\n});\n\n//thunk functions\nexport const getBusinesses = () => async dispatch => {\n  const response = await fetch('/api/businesses');\n  if (response.ok) {\n    const payload = await response.json();\n    dispatch(loadBusinesses(payload));\n  }\n};\nexport const createBusiness = business => async dispatch => {\n  // const { name, description, features, address, city, state, lng, lat, price, categories,owner_id, image } = business\n  const response = await fetch('/api/businesses', {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify(business)\n  });\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(addBusiness(data));\n    return data;\n  }\n};\nexport const updateBusiness = (id, business) => async dispatch => {\n  const response = await fetch(`/api/businesses/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(business)\n  });\n  if (response.ok) {\n    const data = response.json();\n    dispatch(addBusiness(data));\n    return data;\n  }\n};\nexport const getUserBusinesses = id => async dispatch => {\n  const response = await fetch(`/api/users/${id}/current`);\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(loadUserBusinesses(data));\n    return data;\n  }\n};\nexport const getSingleBusiness = id => async dispatch => {\n  const response = await fetch(`/api/businesses/${id}`);\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(loadSingleBusiness(data));\n    return data;\n  }\n};\nexport const clearBusiness = () => async dispatch => {\n  dispatch(removeBusiness());\n};\nexport const removebuinessfunc = id => async dispatch => {\n  const response = await fetch(`/api/businesses/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (response.ok) {\n    dispatch(deleteonebusiness(id));\n  }\n};\nconst initialState = {\n  all_businesses: {},\n  business: {},\n  filtered_businesses: {}\n};\nconst businessesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {\n    ...state\n  };\n  const all_businesses = {};\n  switch (action.type) {\n    case DELETE_BUSINESS_FROM_ALL:\n      delete newState.all_businesses[action.idpayload];\n      return newState;\n    case Load_Single_Businness_Details:\n      newState.business = action.payload;\n      return newState;\n    case LOAD_CURRENT_USER_BUSINESSES:\n      action.payload.forEach(business => all_businesses[business.id] = business);\n      return {\n        ...state,\n        all_businesses\n      };\n    case ADD_BUSINESS:\n      newState.all_businesses[action.payload.id] = action.payload;\n      return newState;\n    case LOAD_BUSINESSES:\n      action.payload.businesses.forEach(business => all_businesses[business.id] = business);\n      return {\n        ...state,\n        all_businesses,\n        filtered_businesses: all_businesses\n      };\n    case LOAD_FILTERED:\n      const filtered_businesses = {};\n      action.payload.forEach(biz => filtered_businesses[biz.id] = biz);\n      return {\n        ...state,\n        filtered_businesses\n      };\n    case REMOVE_BUSINESS:\n      const clearBusiness = {};\n      return {\n        ...state,\n        business: clearBusiness\n      };\n    default:\n      return state;\n  }\n};\nexport default businessesReducer;","map":{"version":3,"names":["LOAD_BUSINESSES","ADD_BUSINESS","LOAD_CURRENT_USER_BUSINESSES","Load_Single_Businness_Details","LOAD_FILTERED","REMOVE_BUSINESS","DELETE_BUSINESS_FROM_ALL","loadBusinesses","payload","type","addBusiness","loadUserBusinesses","loadSingleBusiness","deleteonebusiness","idpayload","loadFiltered","removeBusiness","getBusinesses","dispatch","response","fetch","ok","json","createBusiness","business","headers","method","body","JSON","stringify","data","updateBusiness","id","getUserBusinesses","getSingleBusiness","clearBusiness","removebuinessfunc","initialState","all_businesses","filtered_businesses","businessesReducer","state","action","newState","forEach","businesses","biz"],"sources":["/Users/adambazzi/Desktop/Yelp-clone/react-app/src/store/business.js"],"sourcesContent":["\n\nconst LOAD_BUSINESSES = 'businesses/LOAD_BUSINESSES'\nconst ADD_BUSINESS = 'businesses/ADD_BUSINESS'\nconst LOAD_CURRENT_USER_BUSINESSES = 'businesses/LOAD_CURRENT_USER_BUSINESSES'\nconst Load_Single_Businness_Details = 'businesses/Load_Single_Businness_Details'\nconst LOAD_FILTERED = 'businesses/LOAD_FILTERED'\nconst REMOVE_BUSINESS = 'businesses/REMOVE_BUSINESS'\n\n// Deletening one business from alll businesses\nconst DELETE_BUSINESS_FROM_ALL ='businesses/DELETE_BUSINESS_FROM_ALL'\n\n// action creators\nconst loadBusinesses = payload => ({\n  type: LOAD_BUSINESSES,\n  payload\n});\n\n\nconst addBusiness = payload => ({\n  type: ADD_BUSINESS,\n  payload\n});\n\n\nconst loadUserBusinesses = payload => ({\n  type: LOAD_CURRENT_USER_BUSINESSES,\n  payload\n});\n\nexport const loadSingleBusiness = payload =>({\n  type:Load_Single_Businness_Details,\n  payload\n})\n\n\nconst deleteonebusiness = (idpayload) =>{\n  return{\n    type:DELETE_BUSINESS_FROM_ALL,\n    idpayload\n  }\n}\n\n\nexport const loadFiltered = payload =>({\n  type: LOAD_FILTERED,\n  payload\n})\n\nconst removeBusiness = () => ({\n  type: REMOVE_BUSINESS\n})\n\n//thunk functions\nexport const getBusinesses = () => async dispatch => {\n  const response = await fetch('/api/businesses');\n  if (response.ok) {\n    const payload = await response.json();\n    dispatch(loadBusinesses(payload));\n  }\n};\n\n\nexport const createBusiness = (business) => async dispatch => {\n  // const { name, description, features, address, city, state, lng, lat, price, categories,owner_id, image } = business\n  const response = await fetch('/api/businesses', {\n    headers: { 'Content-Type': 'application/json' },\n    method: 'POST',\n    body: JSON.stringify(business)\n  })\n\n  if (response.ok) {\n    const data = await response.json()\n\n    dispatch(addBusiness(data))\n    return data;\n  }\n\n\n};\n\nexport const updateBusiness = (id, business) => async dispatch => {\n  const response = await fetch(`/api/businesses/${id}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(business)\n  });\n\n  if (response.ok) {\n    const data = response.json();\n    dispatch(addBusiness(data));\n    return data;\n  }\n}\n\n\nexport const getUserBusinesses = (id) => async dispatch => {\n  const response = await fetch(`/api/users/${id}/current`)\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(loadUserBusinesses(data))\n    return data\n  }\n}\n\n\nexport const getSingleBusiness = (id) => async dispatch =>{\n  const response = await fetch(`/api/businesses/${id}`)\n  if (response.ok){\n    const data = await response.json()\n    dispatch(loadSingleBusiness(data))\n    return data\n  }\n}\n\nexport const clearBusiness = () => async dispatch => {\n  dispatch(removeBusiness())\n}\n\nexport const removebuinessfunc = (id) => async dispatch =>{\n  const response = await fetch (`/api/businesses/${id}`,{\n    method:\"DELETE\",\n    headers: { 'Content-Type': 'application/json' },\n  })\n  if (response.ok){\n    dispatch(deleteonebusiness(id))\n  }\n}\n\n\n\nconst initialState = {\n  all_businesses: {},\n  business: {},\n  filtered_businesses: {}\n};\n\n\nconst businessesReducer = (state = initialState, action) => {\n  let newState = {...state}\n  const all_businesses = {};\n  switch (action.type) {\n    case DELETE_BUSINESS_FROM_ALL:\n      delete newState.all_businesses[action.idpayload]\n      return newState\n    case Load_Single_Businness_Details:\n      newState.business=action.payload\n      return newState\n\n    case LOAD_CURRENT_USER_BUSINESSES:\n      action.payload.forEach(business => (all_businesses[business.id] = business));\n\n      return {\n        ...state,\n        all_businesses\n      }\n\n    case ADD_BUSINESS:\n      newState.all_businesses[action.payload.id] = action.payload;\n      return newState;\n    case LOAD_BUSINESSES:\n\n      action.payload.businesses.forEach(business => (all_businesses[business.id] = business));\n      return {\n        ...state,\n        all_businesses,\n        filtered_businesses: all_businesses\n      }\n    case LOAD_FILTERED:\n      const filtered_businesses = {}\n      action.payload.forEach(biz=> filtered_businesses[biz.id] = biz)\n      return {\n        ...state,\n        filtered_businesses\n      }\n    case REMOVE_BUSINESS:\n      const clearBusiness = {}\n      return {\n          ...state,\n          business: clearBusiness\n      }\n    default:\n      return state;\n  }\n}\n\nexport default businessesReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}